{"version":3,"file":"src_app_auth_auth-feature_module_ts.js","mappings":"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","sources":["./src/app/auth/auth-feature.module.ts","./src/app/auth/auth.component.ts","./src/app/auth/auth.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthComponent } from './auth.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SharedModule } from '../shared/shared.module';\nimport { FormsModule } from '@angular/forms';\nimport { NgbAlertModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\n\nconst routes: Routes = [\n  { path: '', component: AuthComponent }\n];\n\n@NgModule({\n  declarations: [AuthComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(routes),\n    SharedModule,\n    NgbAlertModule,\n    NgbTooltipModule\n  ]\n})\nexport class AuthFeatureModule { }\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from './auth.service';\nimport { Subscription } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { ErrorResponse } from '../shared/shared.model';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit, OnDestroy {\n\n  LoginMode = true;\n  IsLoading = false;\n\n  loggedIn: boolean;\n  private authErrSub: Subscription;\n  private loginResultSub: Subscription;\n\n  ResponseFromBackend: ErrorResponse;\n  ShowMessage: boolean;\n  MessageType: string;\n\n  constructor(private authservice: AuthService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authservice.CheckRegistered()) {\n      this.Redirect();\n    }\n\n    this.authErrSub = this.authservice.AuthErrorSub.subscribe((response: ErrorResponse) => {\n      this.ShowMessage = true;\n      this.ResponseFromBackend = response;\n      setTimeout(() => this.ShowMessage = false, 5000);\n\n      if (response) {\n        switch (response.Error.Code) {\n          case 200:\n            this.MessageType = 'success';\n            break;\n          default:\n            this.MessageType = 'danger';\n            break;\n        }\n      }\n\n      this.IsLoading = false;\n    });\n\n    this.loginResultSub = this.authservice.AuthResultSub.subscribe((loggedin: boolean) => {\n      this.loggedIn = loggedin;\n      this.IsLoading = false;\n      if (loggedin) {\n        if (this.authservice.HaveToCheckSecondFactor()) {\n          this.GoToSecondFactor();\n        } else {\n          this.Redirect();\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.loginResultSub.unsubscribe();\n    this.authErrSub.unsubscribe();\n  }\n\n  onSwitchMode() {\n    this.LoginMode = !this.LoginMode;\n  }\n\n  OnSubmitForm(SignupForm: NgForm) {\n    this.IsLoading = true;\n    if (this.LoginMode) {\n      this.authservice\n        .SignIn(SignupForm.value.email, SignupForm.value.password);\n    } else {\n      this.authservice\n        .SignUp(SignupForm.value.email, SignupForm.value.name, SignupForm.value.password);\n    }\n\n    SignupForm.reset();\n  }\n\n  Redirect() {\n    this.router.navigate(['/recipes']);\n  }\n\n  GoToSecondFactor() {\n    this.router.navigate(['/totp']);\n  }\n\n}\n","<div class=\"main-parent-login\">\n  <div class=\"card mx-auto\" style=\"margin-top: 3px;\" *ngIf=\"!IsLoading\">\n    <div class=\"card-header\">\n      <h3>{{ LoginMode? 'Sign in' : 'Sign up'}}</h3>\n    </div>\n    <div class=\"card-body\">\n      <form (ngSubmit)=\"OnSubmitForm(SignupForm)\" #SignupForm=\"ngForm\">\n        <div class=\"input-group mb-3\">\n          <input type=\"email\" name=\"email\" class=\"form-control\" placeholder=\"E-mail\" placement=\"right\" ngbTooltip=\"Real email required\" ngModel email required>\n        </div>\n        <div class=\"input-group mb-3\" *ngIf=\"!LoginMode\">\n          <input type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Name\" ngModel>\n        </div>\n        <div class=\"input-group mb-3\">\n          <input type=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Password\" ngModel required\n            minlength='6' placement=\"right\" ngbTooltip=\"Minimum 6 chars\">\n        </div>\n        <div class=\"float-right\">\n          <div class=\"input-group\">\n            <div class=\"input-group-prepend\">\n              <button type=\"submit\" class=\"btn btn-outline-primary me-1\"\n                [disabled]=\"SignupForm.invalid\">{{ LoginMode ? 'Login' : 'Sign up'}}</button>\n              <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"onSwitchMode()\">To\n                {{ LoginMode ? 'sign up' : 'sign in'}}</button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n    <div class=\"card-footer\">\n      <div class=\"d-flex justify-content-center\">\n        <a href=\"/reset-password\" *ngIf=\"LoginMode\">Forgot your password?</a>\n        <a href=\"/confirm-email\" *ngIf=\"!LoginMode\">No confirmation email?</a>\n      </div>\n    </div>\n    <div style=\"padding: 3px\" *ngIf=\"ShowMessage\">\n      <ngb-alert *ngIf=\"ShowMessage\" [type]=\"MessageType\" (close)=\"ShowMessage = false\">{{ ResponseFromBackend.Error.Message }}</ngb-alert>\n    </div>\n  </div>\n  <div class=\"text-center\">\n    <div class=\"spinner-border\" role=\"status\" *ngIf=\"IsLoading\">\n      <span class=\"visually-hidden-focusable\">Loading...</span>\n    </div>\n  </div>\n</div>\n"],"names":[],"sourceRoot":"webpack:///"}