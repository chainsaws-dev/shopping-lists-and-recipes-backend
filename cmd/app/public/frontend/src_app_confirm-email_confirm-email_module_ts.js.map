{"version":3,"file":"src_app_confirm-email_confirm-email_module_ts.js","mappings":"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","sources":["./src/app/confirm-email/confirm-email.component.ts","./src/app/confirm-email/confirm-email.component.html","./src/app/confirm-email/confirm-email.module.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ErrorResponse } from '../shared/shared.model';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { DataStorageService } from '../shared/data-storage.service';\nimport { ActivatedRoute, Router, Params, UrlSegment } from '@angular/router';\nimport * as url from 'url';\n\n@Component({\n  selector: 'app-confirm-email',\n  templateUrl: './confirm-email.component.html',\n  styleUrls: ['./confirm-email.component.css']\n})\nexport class ConfirmEmailComponent implements OnInit, OnDestroy {\n\n  IsLoading = false;\n\n  ResponseFromBackend: ErrorResponse;\n\n  ShowMessage: boolean;\n  MessageType: string;\n\n  RecivedErrorSub: Subscription;\n  RecivedResponseSub: Subscription;\n  DataServiceSub: Subscription;\n\n  Token: string;\n\n  ResetPasswordMode: boolean;\n\n  constructor(\n    private DataServ: DataStorageService,\n    private activeroute: ActivatedRoute,\n    private router: Router) { }\n\n  ngOnDestroy(): void {\n    this.RecivedErrorSub.unsubscribe();\n    this.RecivedResponseSub.unsubscribe();\n    this.DataServiceSub.unsubscribe();\n  }\n\n  ngOnInit(): void {\n\n    this.DataServiceSub = this.DataServ.LoadingData.subscribe(\n      (State) => {\n        this.IsLoading = State;\n      }\n    );\n\n    this.RecivedErrorSub = this.DataServ.RecivedError.subscribe(\n      (response) => {\n\n        this.ShowMessage = true;\n        this.ResponseFromBackend = response;\n        setTimeout(() => this.ShowMessage = false, 5000);\n\n        if (response) {\n          switch (response.Error.Code) {\n            case 200:\n              this.MessageType = 'success';\n              break;\n            default:\n              this.MessageType = 'danger';\n              break;\n          }\n        }\n      }\n    );\n\n    this.activeroute.queryParams.subscribe((Qparams: Params) => {\n\n      this.Token = Qparams.Token;\n\n      const cururl = this.getUrlWithoutParams();\n\n      this.ResetPasswordMode = cururl === '/reset-password';\n\n      if (!this.ResetPasswordMode) {\n        if (this.Token) {\n          this.DataServ.ConfirmEmail(this.Token);\n        }\n      }\n    }\n    );\n  }\n\n  getUrlWithoutParams() {\n    const urlTree = this.router.parseUrl(this.router.url);\n    urlTree.queryParams = {};\n    return urlTree.toString();\n  }\n\n  OnSubmitForm(ResendConfEmailForm: NgForm) {\n    if (ResendConfEmailForm.valid) {\n\n      this.IsLoading = true;\n\n      if (this.ResetPasswordMode && this.Token) {\n        this.DataServ.SubmitNewPassword(this.Token, ResendConfEmailForm.value.newpassword);\n      } else {\n        if (this.ResetPasswordMode) {\n          this.DataServ.SendEmailResetPassword(ResendConfEmailForm.value.email);\n        } else {\n          this.DataServ.SendEmailConfirmEmail(ResendConfEmailForm.value.email);\n        }\n      }\n\n      ResendConfEmailForm.reset();\n\n    }\n\n  }\n}\n","<div class=\"main-parent-login\">\n  <div class=\"card mx-auto\" style=\"margin-top: 3px;\" *ngIf=\"!IsLoading\">\n    <div class=\"card-header\">\n      <h3>{{ !ResetPasswordMode ? 'Confirm email' : 'Reset password'}}</h3>\n    </div>\n    <div class=\"card-body\" *ngIf=\"!Token || ResetPasswordMode\">\n      <form #ResendConfEmailForm=\"ngForm\" (ngSubmit)=\"OnSubmitForm(ResendConfEmailForm)\">\n        <div class=\"input-group form-group\">\n          <input type=\"email\" name=\"email\" class=\"form-control mb-3\" placeholder=\"E-mail\" placement=\"right\" ngbTooltip=\"Registered email required\" ngModel email required *ngIf=\"!Token\">\n          <input type=\"password\" name=\"newpassword\" class=\"form-control mb-3\" placeholder=\"New password\" ngModel minlength='6' placement=\"right\" ngbTooltip=\"Minimum 6 chars\" required *ngIf=\"ResetPasswordMode && Token\">\n        </div>\n        <div class=\"form-group float-right\" *ngIf=\"!Token || ResetPasswordMode\">\n          <div class=\"input-group\">\n            <button type=\"submit\" class=\"btn btn btn-outline-primary\"\n            [disabled]=\"ResendConfEmailForm.invalid\">{{ResetPasswordMode && Token ? 'Save' : 'Send'}}</button>\n          </div>\n        </div>\n      </form>\n    </div>\n    <div class=\"card-footer\">\n      <div class=\"d-flex justify-content-center\">\n        <a href=\"/\">Back</a>\n      </div>\n    </div>\n    <div style=\"padding: 3px\" *ngIf=\"ShowMessage\">\n      <ngb-alert *ngIf=\"ShowMessage\" [type]=\"MessageType\" (close)=\"ShowMessage = false\">{{ ResponseFromBackend.Error.Message }}</ngb-alert>\n    </div>\n  </div>\n  <div class=\"text-center\">\n    <div class=\"spinner-border\" role=\"status\" *ngIf=\"IsLoading\">\n      <span class=\"visually-hidden-focusable\">Loading...</span>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ConfirmEmailComponent} from './confirm-email.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgbAlertModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\n\nconst routes: Routes = [\n  { path: '', component: ConfirmEmailComponent, },\n];\n\n@NgModule({\n  declarations: [\n    ConfirmEmailComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgbAlertModule,\n    RouterModule.forChild(routes),\n    NgbTooltipModule\n  ]\n})\nexport class ConfirmEmailModule { }\n"],"names":[],"sourceRoot":"webpack:///"}